pipeline {
    agent any

    stages {
        stage('Run unit test(s)') {
            steps {
                dir('AcnhMate.Tests') {
                    sh 'sudo dotnet clean'
                    sh "sudo dotnet test --collect:'XPlat Code Coverage'"
                }
            }

            post {
                always {
                    archiveArtifacts 'AcnhMate.Tests/TestResults/*/coverage.cobertura.xml'

                    publishCoverage adapters: [coberturaAdapter(path: 'AcnhMate.Tests/TestResults/*/coverage.cobertura.xml', thresholds: [
                            [failUnhealthy: false, thresholdTarget: 'Conditional', unhealthyThreshold: 80.0]
                    ])], sourceFileResolver: sourceFiles('NEVER_STORE')
                }
            }
        }

        stage('Build API') {
            when {
                anyOf {
                    changeset 'AcnhMate.Api/**'
                }
            }

            steps {
                dir('AcnhMate.Api') {
                    sh 'sudo dotnet clean'
                    sh 'sudo dotnet publish -c Release'
                }
            }
        }

        stage('Build image(s)') {
            steps {
                sh 'docker compose --env-file test.env build'
            }
        }

        stage('Stop and remove old container(s)') {
            steps {
                script {
                    try {
                        sh 'docker compose -p test-backend --env-file test.env down'
                    } catch (err) {}
                }
            }
        }

        stage('Create and start new container(s)') {
            steps {
                sh 'docker compose -p test-backend --env-file test.env up -d'
                sh 'docker ps'
            }
        }

        stage('Run load test(s)') {
            steps {
                sh 'k6 run -e BASE_URL=http://20.223.239.183:8092 backend/k6/load.js'
            }

            post {
                always {
                    archiveArtifacts 'k6/load.html'

                    publishHTML (target : [allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports',
                        reportFiles: 'myreport.html',
                        reportName: 'My Reports',
                        reportTitles: 'The Report'
                    ])
                }
            }
        }

        stage('Push image(s) to registry') {
            steps {
                sh 'docker compose --env-file test.env push'
            }
        }

        stage('Deploy to production') {
            steps {
                build job: 'prod-backend', wait: false, parameters: [
                    string(name: 'TAG', value: env.BUILD_NUMBER)
                ]
            }
        }
    }

    post {
        always {
            echo 'Finished.'
        }
    }
}